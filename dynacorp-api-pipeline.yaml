---
AWSTemplateFormatVersion: "2010-09-09"

Parameters:

  GitHubUsername:
    Description: "Your GitHub username or organization name"
    Type: "String"
    Default: "ustseis615"

  GitHubBranchName:
    Description: "GitHub branch name"
    Type: "String"
    Default: "master"

  GitHubRepositoryName:
    Description: "GitHub repository name"
    Type: "String"
    Default: "final-challenge-serehub"
  
  AWSAccountID:
    Description: "AWS Account ID"
    Type: "String"
    
  AWSRegion:
    Description: "AWS Region"
    Type: "String"
    Default: "us-east-1"

Resources:

  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"

  ArtifactBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArtifactBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "DenyUnEncryptedObjectUploads"
            Effect: "Deny"
            Principal: "*"
            Action: "s3:PutObject"
            Resource: !Join ["", [!GetAtt ArtifactBucket.Arn, "/*"]]
            Condition:
              StringNotEquals:
                s3:x-amz-server-side-encryption: "aws:kms"

  AppBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      Description: "pipeline build project"
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/amazonlinux2-x86_64-standard:3.0"
        ImagePullCredentialsType: "CODEBUILD"
        PrivilegedMode: true
        Type: "LINUX_CONTAINER"
        EnvironmentVariables: 
          - Name: "REPOSITORY_URI"
            Value: !Ref DockerRepository
      ServiceRole: !GetAtt AppBuildRole.Arn
      Source:
        Type: "CODEPIPELINE"
      
  DockerRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "classweb"
      
  AppBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "CodeBuildAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:s3:::codepipeline-${AWS::Region}-*"
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketAcl"
                  - "s3:GetBucketLocation"
              - Effect: "Allow"
                Resource:
                  - !GetAtt ArtifactBucket.Arn
                  - !Join ["", [ !GetAtt ArtifactBucket.Arn, "/*"]]
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:GetBucketAcl"
                  - "s3:GetBucketLocation"
              - Effect: "Allow"
                Resource:
                  - !GetAtt DockerRepository.Arn
                Action:
                  - "ecr:GetRepositoryPolicy"
                  - "ecr:ListImages"
                  - "ecr:PutImage"
                  - "ecr:UploadLayerPart"
                  - "ecr:TagResource"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:CompleteLayerUpload"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:DescribeImages"
                  - "ecr:DescribeRepositories"
                  - "ecr:BatchCheckLayerAvailability"
              - Effect: "Allow"
                Resource:
                  - "*"
                Action:
                  - "ecr:GetAuthorizationToken"

  BuildLogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "BuildLogAccess"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Resource:
              - !Sub
                - "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${project}"
                - project: !Ref AppBuildProject
              - !Sub
                - "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${project}:*"
                - project: !Ref AppBuildProject
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
      Roles:
        - !Ref AppBuildRole

  AppCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref ArtifactBucket
        Type: "S3"
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      Stages:
        - Name: "Source"
          Actions:
            - Name: "GetSource"
              ActionTypeId:
                Category: "Source"
                Owner: "ThirdParty"
                Provider: "GitHub"
                Version: "1"
              Configuration:
                Owner: !Ref GitHubUsername
                Repo: !Ref GitHubRepositoryName
                Branch: !Ref GitHubBranchName
                OAuthToken: '{{resolve:secretsmanager:github-token:SecretString:token}}'
                PollForSourceChanges: "false"
              OutputArtifacts:
                - Name: "SourceCode"
        - Name: "Build"
          Actions:
            - Name: "BuildSource"
              InputArtifacts:
                - Name: "SourceCode"
              ActionTypeId:
                Category: "Build"
                Owner: "AWS"
                Provider: "CodeBuild"
                Version: "1"
              Configuration:
                ProjectName: !Ref AppBuildProject
              OutputArtifacts:
                - Name: CodeArtifact
  
  Webhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Authentication: "GITHUB_HMAC"
      AuthenticationConfiguration:
        SecretToken: '{{resolve:secretsmanager:github-token:SecretString:token}}'
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: "refs/heads/master" 
      TargetPipeline: !Ref AppCodePipeline
      TargetPipelineVersion: !GetAtt AppCodePipeline.Version
      TargetAction: "GetSource"
      RegisterWithThirdParty: "true"

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
      Path: "/service-role/"
      Policies:
        - PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - "codestar-connections:UseConnection"
                Resource: "*"
              - Effect: "Allow"
                Resource:
                  - !GetAtt ArtifactBucket.Arn
                  - !Join ["", [!GetAtt ArtifactBucket.Arn, "/*"]]
                Action:
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                  - "s3:GetObject"
                  - "s3:GetBucketAcl"
                  - "s3:GetBucketLocation"
              - Action:
                  - "codedeploy:CreateDeployment"
                  - "codedeploy:GetApplication"
                  - "codedeploy:GetApplicationRevision"
                  - "codedeploy:GetDeployment"
                  - "codedeploy:GetDeploymentConfig"
                  - "codedeploy:RegisterApplicationRevision"
                Resource: "*"
                Effect: "Allow"
              - Action:
                  - "ec2:*"
                  - "elasticloadbalancing:*"
                  - "autoscaling:*"
                  - "cloudwatch:*"
                Resource: "*"
                Effect: "Allow"
              - Action:
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:StartBuild"
                Resource:
                  - !GetAtt AppBuildProject.Arn
                Effect: "Allow"
            Version: "2012-10-17"
          PolicyName: "ec2codedeploy"

Outputs:
  S3BucketDomain:
    Description: "S3 bucket domain name"
    Value: !GetAtt ArtifactBucket.DomainName
